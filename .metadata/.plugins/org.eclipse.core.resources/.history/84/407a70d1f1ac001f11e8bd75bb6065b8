package com.project.managerEmployees.Controller;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.project.managerEmployees.Entity.Project;
import com.project.managerEmployees.Service.ProjectService;

@RestController
@RequestMapping("/projects")
public class ProjectController{
	
	@Autowired
	private ProjectService projectService;
	
	@GetMapping
	public List<Project> getProjectDetails(){
		return projectService.getAllProjects();	
	}
	
	@GetMapping("/{id}")
	public Project getProjectById(@PathVariable Integer id) {
		return projectService.getProjectById(id);
	}
	
	
	@PostMapping("/addProject")
	public String addProject(@RequestParam String projectName, 
	                         @RequestParam String client,
	                         @RequestParam String typeOfProject, 
	                         @RequestParam String submissionMethod,
	                         @RequestParam String status,
	                         @RequestParam String plannedStartDate, // date as String
	                         @RequestParam String actualStartDate) { // date as String

	    try {
	        // Define date format
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	        
	        // Convert String to java.sql.Date
	        Date plannedStart = new Date(sdf.parse(plannedStartDate).getTime());
	        Date actualStart = new Date(sdf.parse(actualStartDate).getTime());

	        // Create a new Project object with converted dates
	        Project newProject = new Project(projectName, client, typeOfProject, 
	                                          submissionMethod, status, 
	                                          plannedStart, actualStart, 
	                                          null, null);  // End dates can be null initially

	        projectService.createProject(newProject);  // Save the project
	    } catch (ParseException e) {
	        e.printStackTrace();
	    }

	    return "redirect:/projects";
	}

	
	 @PutMapping("/{id}")
	 public Project updateProject(@PathVariable Integer id, @RequestBody Project updatedProject) {
	    return projectService.updateProject(id, updatedProject);
	 }
	
	@DeleteMapping("/{id}")
	public List<Project> deleteProjects(@PathVariable Integer id){
		return projectService.deleteProjectById(id);
	}
	
	
	
}
 